syntax = "proto3";

package compliance.compliance;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "compliance/compliance/params.proto";

option go_package = "compliance/x/compliance/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams   (MsgUpdateParams  ) returns (MsgUpdateParamsResponse  );
  rpc CreateApproval (MsgCreateApproval) returns (MsgCreateApprovalResponse);
  rpc UpdateApproval (MsgUpdateApproval) returns (MsgUpdateApprovalResponse);
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                               "authority";
  option           (amino.name) = "compliance/x/compliance/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgCreateApproval {
  option (cosmos.msg.v1.signer) = "creator";
  string creator    = 1;
  string driverId   = 3;
  string serverUrl  = 4;
}

message MsgCreateApprovalResponse {
  uint64 id = 1;
}

message MsgUpdateApproval {
  option (cosmos.msg.v1.signer) = "creator";
  string creator    = 1;
  uint64 approvalId = 2;
  string testerId   = 3;
  string testerUrl  = 4;
  bool   approved   = 5;
}

message MsgUpdateApprovalResponse {
  uint64 id = 1;
}

