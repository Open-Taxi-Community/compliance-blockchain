// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: compliance/compliance/approval.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ApprovalStatus int32

const (
	ApprovalStatus_UNSET    ApprovalStatus = 0
	ApprovalStatus_PENDING  ApprovalStatus = 1
	ApprovalStatus_APPROVED ApprovalStatus = 2
	ApprovalStatus_REJECTED ApprovalStatus = 3
)

var ApprovalStatus_name = map[int32]string{
	0: "UNSET",
	1: "PENDING",
	2: "APPROVED",
	3: "REJECTED",
}

var ApprovalStatus_value = map[string]int32{
	"UNSET":    0,
	"PENDING":  1,
	"APPROVED": 2,
	"REJECTED": 3,
}

func (x ApprovalStatus) String() string {
	return proto.EnumName(ApprovalStatus_name, int32(x))
}

func (ApprovalStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_707cd4ec68d4d227, []int{0}
}

type Approval struct {
	Id        uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ServerUrl string            `protobuf:"bytes,3,opt,name=serverUrl,proto3" json:"serverUrl,omitempty"`
	DriverID  string            `protobuf:"bytes,4,opt,name=driverID,proto3" json:"driverID,omitempty"`
	Status    ApprovalStatus    `protobuf:"varint,5,opt,name=status,proto3,enum=compliance.compliance.ApprovalStatus" json:"status,omitempty"`
	Creator   string            `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	Results   []*ApprovalResult `protobuf:"bytes,7,rep,name=results,proto3" json:"results,omitempty"`
}

func (m *Approval) Reset()         { *m = Approval{} }
func (m *Approval) String() string { return proto.CompactTextString(m) }
func (*Approval) ProtoMessage()    {}
func (*Approval) Descriptor() ([]byte, []int) {
	return fileDescriptor_707cd4ec68d4d227, []int{0}
}
func (m *Approval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Approval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Approval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Approval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Approval.Merge(m, src)
}
func (m *Approval) XXX_Size() int {
	return m.Size()
}
func (m *Approval) XXX_DiscardUnknown() {
	xxx_messageInfo_Approval.DiscardUnknown(m)
}

var xxx_messageInfo_Approval proto.InternalMessageInfo

func (m *Approval) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Approval) GetServerUrl() string {
	if m != nil {
		return m.ServerUrl
	}
	return ""
}

func (m *Approval) GetDriverID() string {
	if m != nil {
		return m.DriverID
	}
	return ""
}

func (m *Approval) GetStatus() ApprovalStatus {
	if m != nil {
		return m.Status
	}
	return ApprovalStatus_UNSET
}

func (m *Approval) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Approval) GetResults() []*ApprovalResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterEnum("compliance.compliance.ApprovalStatus", ApprovalStatus_name, ApprovalStatus_value)
	proto.RegisterType((*Approval)(nil), "compliance.compliance.Approval")
}

func init() {
	proto.RegisterFile("compliance/compliance/approval.proto", fileDescriptor_707cd4ec68d4d227)
}

var fileDescriptor_707cd4ec68d4d227 = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x49, 0xce, 0xcf, 0x2d,
	0xc8, 0xc9, 0x4c, 0xcc, 0x4b, 0x4e, 0xd5, 0x47, 0x62, 0x26, 0x16, 0x14, 0x14, 0xe5, 0x97, 0x25,
	0xe6, 0xe8, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x89, 0x22, 0xa4, 0xf4, 0x10, 0x4c, 0x29, 0x6d,
	0xfc, 0x9a, 0xe3, 0x8b, 0x52, 0x8b, 0x4b, 0x73, 0x4a, 0x20, 0x66, 0x28, 0xbd, 0x63, 0xe4, 0xe2,
	0x70, 0x84, 0xca, 0x08, 0xf1, 0x71, 0x31, 0x65, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x04,
	0x31, 0x65, 0xa6, 0x08, 0xc9, 0x70, 0x71, 0x16, 0xa7, 0x16, 0x95, 0xa5, 0x16, 0x85, 0x16, 0xe5,
	0x48, 0x30, 0x2b, 0x30, 0x6a, 0x70, 0x06, 0x21, 0x04, 0x84, 0xa4, 0xb8, 0x38, 0x52, 0x8a, 0x32,
	0xcb, 0x52, 0x8b, 0x3c, 0x5d, 0x24, 0x58, 0xc0, 0x92, 0x70, 0xbe, 0x90, 0x2d, 0x17, 0x5b, 0x71,
	0x49, 0x62, 0x49, 0x69, 0xb1, 0x04, 0xab, 0x02, 0xa3, 0x06, 0x9f, 0x91, 0xaa, 0x1e, 0x56, 0xb7,
	0xea, 0xc1, 0xac, 0x0e, 0x06, 0x2b, 0x0e, 0x82, 0x6a, 0x12, 0x92, 0xe0, 0x62, 0x4f, 0x2e, 0x4a,
	0x4d, 0x2c, 0xc9, 0x2f, 0x92, 0x60, 0x03, 0x9b, 0x0c, 0xe3, 0x0a, 0xd9, 0x73, 0xb1, 0x43, 0xdc,
	0x5f, 0x2c, 0xc1, 0xae, 0xc0, 0xac, 0xc1, 0x4d, 0xd0, 0xe4, 0x20, 0xb0, 0xea, 0x20, 0x98, 0x2e,
	0x2d, 0x17, 0x2e, 0x3e, 0x54, 0x4b, 0x85, 0x38, 0xb9, 0x58, 0x43, 0xfd, 0x82, 0x5d, 0x43, 0x04,
	0x18, 0x84, 0xb8, 0xb9, 0xd8, 0x03, 0x5c, 0xfd, 0x5c, 0x3c, 0xfd, 0xdc, 0x05, 0x18, 0x85, 0x78,
	0xb8, 0x38, 0x1c, 0x03, 0x02, 0x82, 0xfc, 0xc3, 0x5c, 0x5d, 0x04, 0x98, 0x40, 0xbc, 0x20, 0x57,
	0x2f, 0x57, 0xe7, 0x10, 0x57, 0x17, 0x01, 0x66, 0x27, 0xf3, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c,
	0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e,
	0x3c, 0x96, 0x63, 0x88, 0x92, 0x45, 0x0a, 0xf2, 0x0a, 0xe4, 0xf0, 0x2f, 0xa9, 0x2c, 0x48, 0x2d,
	0x4e, 0x62, 0x03, 0x07, 0xbb, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x87, 0xef, 0x60, 0x90, 0xe2,
	0x01, 0x00, 0x00,
}

func (m *Approval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Approval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Approval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApproval(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintApproval(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	if m.Status != 0 {
		i = encodeVarintApproval(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.DriverID) > 0 {
		i -= len(m.DriverID)
		copy(dAtA[i:], m.DriverID)
		i = encodeVarintApproval(dAtA, i, uint64(len(m.DriverID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ServerUrl) > 0 {
		i -= len(m.ServerUrl)
		copy(dAtA[i:], m.ServerUrl)
		i = encodeVarintApproval(dAtA, i, uint64(len(m.ServerUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintApproval(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApproval(dAtA []byte, offset int, v uint64) int {
	offset -= sovApproval(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Approval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApproval(uint64(m.Id))
	}
	l = len(m.ServerUrl)
	if l > 0 {
		n += 1 + l + sovApproval(uint64(l))
	}
	l = len(m.DriverID)
	if l > 0 {
		n += 1 + l + sovApproval(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovApproval(uint64(m.Status))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovApproval(uint64(l))
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovApproval(uint64(l))
		}
	}
	return n
}

func sovApproval(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApproval(x uint64) (n int) {
	return sovApproval(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Approval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApproval
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Approval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Approval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApproval
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApproval
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApproval
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApproval
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DriverID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApproval
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApproval
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApproval
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DriverID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApproval
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ApprovalStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApproval
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApproval
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApproval
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApproval
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApproval
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApproval
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &ApprovalResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApproval(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApproval
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApproval(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApproval
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApproval
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApproval
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApproval
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApproval
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApproval
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApproval        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApproval          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApproval = fmt.Errorf("proto: unexpected end of group")
)
