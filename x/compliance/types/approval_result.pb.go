// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: compliance/compliance/approval_result.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ApprovalResult struct {
	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TesterUrl string `protobuf:"bytes,2,opt,name=testerUrl,proto3" json:"testerUrl,omitempty"`
	TesterID  string `protobuf:"bytes,3,opt,name=testerID,proto3" json:"testerID,omitempty"`
	Approved  bool   `protobuf:"varint,4,opt,name=approved,proto3" json:"approved,omitempty"`
	Creator   string `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *ApprovalResult) Reset()         { *m = ApprovalResult{} }
func (m *ApprovalResult) String() string { return proto.CompactTextString(m) }
func (*ApprovalResult) ProtoMessage()    {}
func (*ApprovalResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_4be959e30e251892, []int{0}
}
func (m *ApprovalResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApprovalResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApprovalResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApprovalResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApprovalResult.Merge(m, src)
}
func (m *ApprovalResult) XXX_Size() int {
	return m.Size()
}
func (m *ApprovalResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ApprovalResult.DiscardUnknown(m)
}

var xxx_messageInfo_ApprovalResult proto.InternalMessageInfo

func (m *ApprovalResult) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ApprovalResult) GetTesterUrl() string {
	if m != nil {
		return m.TesterUrl
	}
	return ""
}

func (m *ApprovalResult) GetTesterID() string {
	if m != nil {
		return m.TesterID
	}
	return ""
}

func (m *ApprovalResult) GetApproved() bool {
	if m != nil {
		return m.Approved
	}
	return false
}

func (m *ApprovalResult) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*ApprovalResult)(nil), "compliance.compliance.ApprovalResult")
}

func init() {
	proto.RegisterFile("compliance/compliance/approval_result.proto", fileDescriptor_4be959e30e251892)
}

var fileDescriptor_4be959e30e251892 = []byte{
	// 206 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4e, 0xce, 0xcf, 0x2d,
	0xc8, 0xc9, 0x4c, 0xcc, 0x4b, 0x4e, 0xd5, 0x47, 0x62, 0x26, 0x16, 0x14, 0x14, 0xe5, 0x97, 0x25,
	0xe6, 0xc4, 0x17, 0xa5, 0x16, 0x97, 0xe6, 0x94, 0xe8, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x89,
	0x22, 0x54, 0xe8, 0x21, 0x98, 0x4a, 0x13, 0x18, 0xb9, 0xf8, 0x1c, 0xa1, 0x1a, 0x82, 0xc0, 0xea,
	0x85, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x58, 0x82, 0x98, 0x32, 0x53,
	0x84, 0x64, 0xb8, 0x38, 0x4b, 0x52, 0x8b, 0x4b, 0x52, 0x8b, 0x42, 0x8b, 0x72, 0x24, 0x98, 0x14,
	0x18, 0x35, 0x38, 0x83, 0x10, 0x02, 0x42, 0x52, 0x5c, 0x1c, 0x10, 0x8e, 0xa7, 0x8b, 0x04, 0x33,
	0x58, 0x12, 0xce, 0x07, 0xc9, 0x41, 0x1c, 0x93, 0x9a, 0x22, 0xc1, 0xa2, 0xc0, 0xa8, 0xc1, 0x11,
	0x04, 0xe7, 0x0b, 0x49, 0x70, 0xb1, 0x27, 0x17, 0xa5, 0x26, 0x96, 0xe4, 0x17, 0x49, 0xb0, 0x82,
	0xb5, 0xc1, 0xb8, 0x4e, 0xe6, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91,
	0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0x25,
	0x8b, 0xe4, 0xcb, 0x0a, 0x64, 0x2f, 0x97, 0x54, 0x16, 0xa4, 0x16, 0x27, 0xb1, 0x81, 0x7d, 0x6a,
	0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xde, 0x32, 0xcc, 0xcd, 0x18, 0x01, 0x00, 0x00,
}

func (m *ApprovalResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApprovalResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApprovalResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintApprovalResult(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Approved {
		i--
		if m.Approved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.TesterID) > 0 {
		i -= len(m.TesterID)
		copy(dAtA[i:], m.TesterID)
		i = encodeVarintApprovalResult(dAtA, i, uint64(len(m.TesterID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TesterUrl) > 0 {
		i -= len(m.TesterUrl)
		copy(dAtA[i:], m.TesterUrl)
		i = encodeVarintApprovalResult(dAtA, i, uint64(len(m.TesterUrl)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApprovalResult(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApprovalResult(dAtA []byte, offset int, v uint64) int {
	offset -= sovApprovalResult(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ApprovalResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApprovalResult(uint64(m.Id))
	}
	l = len(m.TesterUrl)
	if l > 0 {
		n += 1 + l + sovApprovalResult(uint64(l))
	}
	l = len(m.TesterID)
	if l > 0 {
		n += 1 + l + sovApprovalResult(uint64(l))
	}
	if m.Approved {
		n += 2
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovApprovalResult(uint64(l))
	}
	return n
}

func sovApprovalResult(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApprovalResult(x uint64) (n int) {
	return sovApprovalResult(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ApprovalResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApprovalResult
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApprovalResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApprovalResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApprovalResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TesterUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApprovalResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApprovalResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApprovalResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TesterUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TesterID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApprovalResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApprovalResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApprovalResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TesterID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApprovalResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Approved = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApprovalResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApprovalResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApprovalResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApprovalResult(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApprovalResult
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApprovalResult(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApprovalResult
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApprovalResult
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApprovalResult
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApprovalResult
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApprovalResult
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApprovalResult
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApprovalResult        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApprovalResult          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApprovalResult = fmt.Errorf("proto: unexpected end of group")
)
