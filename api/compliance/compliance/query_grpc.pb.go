// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: compliance/compliance/query.proto

package compliance

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                = "/compliance.compliance.Query/Params"
	Query_ListPendingApprovals_FullMethodName  = "/compliance.compliance.Query/ListPendingApprovals"
	Query_ListApprovedApprovals_FullMethodName = "/compliance.compliance.Query/ListApprovedApprovals"
	Query_GetApprovalByID_FullMethodName       = "/compliance.compliance.Query/GetApprovalByID"
	Query_ListDriverApprovals_FullMethodName   = "/compliance.compliance.Query/ListDriverApprovals"
	Query_ListRejectedApprovals_FullMethodName = "/compliance.compliance.Query/ListRejectedApprovals"
	Query_ListAllApprovals_FullMethodName      = "/compliance.compliance.Query/ListAllApprovals"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of ListPendingApprovals items.
	ListPendingApprovals(ctx context.Context, in *QueryListPendingApprovalsRequest, opts ...grpc.CallOption) (*QueryListPendingApprovalsResponse, error)
	// Queries a list of ListApprovedApprovals items.
	ListApprovedApprovals(ctx context.Context, in *QueryListApprovedApprovalsRequest, opts ...grpc.CallOption) (*QueryListApprovedApprovalsResponse, error)
	// Queries a list of GetApproval items.
	GetApprovalByID(ctx context.Context, in *QueryGetApprovalByIDRequest, opts ...grpc.CallOption) (*QueryGetApprovalByIDResponse, error)
	// Queries a list of ListDriverApprovals items.
	ListDriverApprovals(ctx context.Context, in *QueryListDriverApprovalsRequest, opts ...grpc.CallOption) (*QueryListDriverApprovalsResponse, error)
	// Queries a list of ListRejectedApprovals items.
	ListRejectedApprovals(ctx context.Context, in *QueryListRejectedApprovalsRequest, opts ...grpc.CallOption) (*QueryListRejectedApprovalsResponse, error)
	// Queries a list of ListAllApprovals items.
	ListAllApprovals(ctx context.Context, in *QueryListAllApprovalsRequest, opts ...grpc.CallOption) (*QueryListAllApprovalsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListPendingApprovals(ctx context.Context, in *QueryListPendingApprovalsRequest, opts ...grpc.CallOption) (*QueryListPendingApprovalsResponse, error) {
	out := new(QueryListPendingApprovalsResponse)
	err := c.cc.Invoke(ctx, Query_ListPendingApprovals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListApprovedApprovals(ctx context.Context, in *QueryListApprovedApprovalsRequest, opts ...grpc.CallOption) (*QueryListApprovedApprovalsResponse, error) {
	out := new(QueryListApprovedApprovalsResponse)
	err := c.cc.Invoke(ctx, Query_ListApprovedApprovals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetApprovalByID(ctx context.Context, in *QueryGetApprovalByIDRequest, opts ...grpc.CallOption) (*QueryGetApprovalByIDResponse, error) {
	out := new(QueryGetApprovalByIDResponse)
	err := c.cc.Invoke(ctx, Query_GetApprovalByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListDriverApprovals(ctx context.Context, in *QueryListDriverApprovalsRequest, opts ...grpc.CallOption) (*QueryListDriverApprovalsResponse, error) {
	out := new(QueryListDriverApprovalsResponse)
	err := c.cc.Invoke(ctx, Query_ListDriverApprovals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListRejectedApprovals(ctx context.Context, in *QueryListRejectedApprovalsRequest, opts ...grpc.CallOption) (*QueryListRejectedApprovalsResponse, error) {
	out := new(QueryListRejectedApprovalsResponse)
	err := c.cc.Invoke(ctx, Query_ListRejectedApprovals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListAllApprovals(ctx context.Context, in *QueryListAllApprovalsRequest, opts ...grpc.CallOption) (*QueryListAllApprovalsResponse, error) {
	out := new(QueryListAllApprovalsResponse)
	err := c.cc.Invoke(ctx, Query_ListAllApprovals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of ListPendingApprovals items.
	ListPendingApprovals(context.Context, *QueryListPendingApprovalsRequest) (*QueryListPendingApprovalsResponse, error)
	// Queries a list of ListApprovedApprovals items.
	ListApprovedApprovals(context.Context, *QueryListApprovedApprovalsRequest) (*QueryListApprovedApprovalsResponse, error)
	// Queries a list of GetApproval items.
	GetApprovalByID(context.Context, *QueryGetApprovalByIDRequest) (*QueryGetApprovalByIDResponse, error)
	// Queries a list of ListDriverApprovals items.
	ListDriverApprovals(context.Context, *QueryListDriverApprovalsRequest) (*QueryListDriverApprovalsResponse, error)
	// Queries a list of ListRejectedApprovals items.
	ListRejectedApprovals(context.Context, *QueryListRejectedApprovalsRequest) (*QueryListRejectedApprovalsResponse, error)
	// Queries a list of ListAllApprovals items.
	ListAllApprovals(context.Context, *QueryListAllApprovalsRequest) (*QueryListAllApprovalsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) ListPendingApprovals(context.Context, *QueryListPendingApprovalsRequest) (*QueryListPendingApprovalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPendingApprovals not implemented")
}
func (UnimplementedQueryServer) ListApprovedApprovals(context.Context, *QueryListApprovedApprovalsRequest) (*QueryListApprovedApprovalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApprovedApprovals not implemented")
}
func (UnimplementedQueryServer) GetApprovalByID(context.Context, *QueryGetApprovalByIDRequest) (*QueryGetApprovalByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApprovalByID not implemented")
}
func (UnimplementedQueryServer) ListDriverApprovals(context.Context, *QueryListDriverApprovalsRequest) (*QueryListDriverApprovalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDriverApprovals not implemented")
}
func (UnimplementedQueryServer) ListRejectedApprovals(context.Context, *QueryListRejectedApprovalsRequest) (*QueryListRejectedApprovalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRejectedApprovals not implemented")
}
func (UnimplementedQueryServer) ListAllApprovals(context.Context, *QueryListAllApprovalsRequest) (*QueryListAllApprovalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllApprovals not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListPendingApprovals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListPendingApprovalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListPendingApprovals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListPendingApprovals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListPendingApprovals(ctx, req.(*QueryListPendingApprovalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListApprovedApprovals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListApprovedApprovalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListApprovedApprovals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListApprovedApprovals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListApprovedApprovals(ctx, req.(*QueryListApprovedApprovalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetApprovalByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetApprovalByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetApprovalByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetApprovalByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetApprovalByID(ctx, req.(*QueryGetApprovalByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListDriverApprovals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListDriverApprovalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListDriverApprovals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListDriverApprovals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListDriverApprovals(ctx, req.(*QueryListDriverApprovalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListRejectedApprovals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListRejectedApprovalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListRejectedApprovals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListRejectedApprovals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListRejectedApprovals(ctx, req.(*QueryListRejectedApprovalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListAllApprovals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListAllApprovalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListAllApprovals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListAllApprovals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListAllApprovals(ctx, req.(*QueryListAllApprovalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "compliance.compliance.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ListPendingApprovals",
			Handler:    _Query_ListPendingApprovals_Handler,
		},
		{
			MethodName: "ListApprovedApprovals",
			Handler:    _Query_ListApprovedApprovals_Handler,
		},
		{
			MethodName: "GetApprovalByID",
			Handler:    _Query_GetApprovalByID_Handler,
		},
		{
			MethodName: "ListDriverApprovals",
			Handler:    _Query_ListDriverApprovals_Handler,
		},
		{
			MethodName: "ListRejectedApprovals",
			Handler:    _Query_ListRejectedApprovals_Handler,
		},
		{
			MethodName: "ListAllApprovals",
			Handler:    _Query_ListAllApprovals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "compliance/compliance/query.proto",
}
